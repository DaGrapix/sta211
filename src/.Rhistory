}
return(list(chain=chain, taux.accept=mean(accept)*100))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=950),c(C1=125, C20=134, C21=21),rbeta(n=1, shape1=1, shape2=3),10000,1,3,200)
library(extraDistr)
MCMC <- function(theta.0, y, pi.0, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)*100))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),rbeta(n=1, shape1=1, shape2=3),10000,1,3,50)
library(extraDistr)
MCMC <- function(theta.0, y, pi.0, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)*100))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),rbeta(n=1, shape1=1, shape2=3),10000,1,3,75)
library(extraDistr)
MCMC <- function(theta.0, y, pi.0, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)*100))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),rbeta(n=1, shape1=1, shape2=3),10000,1,3,80)
N.law <- function(N, pi, c1, c20){
density <- choose(N,c1+c20)*(1-pi)^(2*N)
return(density)
}
library(extraDistr)
MCMC <- function(theta.0, y, pi.0, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)*100))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),rbeta(n=1, shape1=1, shape2=3),10000,1,3,60)
set.seed(5)
k.seq <- seq(1, 301, 10)
n.iter <- 10000
a <- 1
b <- 3
y <- c(C1=125, C20=134, C21=21)
pi.0 <- rbeta(n=1, shape1=a, shape2=b)
theta.0 <- c(pi.0=pi.0, N.0=1000)
print(theta.0)
#MCMC(theta.0, y, pi, n.iter, 1, 3, 5)
plot.k.accept.rate(k.seq, theta.0,pi.0, n.iter, y, a, b)
##################changer
#k.opt <- ?
plot.k.accept.rate <- function(k.seq, theta.0,pi.0, n.iter, y, a, b){
accept.rate.evolution <- sapply(k.seq, FUN=function(x){
return(MCMC(theta.0, y, pi.0, n.iter, a, b, x)$taux.accept)})
plot(x=k.seq, y=accept.rate.evolution)
}
print(accept.rate.evolution)
plot.k.accept.rate <- function(k.seq, theta.0,pi.0, n.iter, y, a, b){
accept.rate.evolution <- sapply(k.seq, FUN=function(x){
return(MCMC(theta.0, y, pi.0, n.iter, a, b, x)$taux.accept)})
plot(x=k.seq, y=accept.rate.evolution)
print(accept.rate.evolution)
}
set.seed(5)
k.seq <- seq(1, 301, 10)
n.iter <- 10000
a <- 1
b <- 3
y <- c(C1=125, C20=134, C21=21)
pi.0 <- rbeta(n=1, shape1=a, shape2=b)
theta.0 <- c(pi.0=pi.0, N.0=1000)
print(theta.0)
#MCMC(theta.0, y, pi, n.iter, 1, 3, 5)
plot.k.accept.rate(k.seq, theta.0,pi.0, n.iter, y, a, b)
##################changer
#k.opt <- ?
plot.k.accept.rate <- function(k.seq, theta.0,pi.0, n.iter, y, a, b){
accept.rate.evolution <- sapply(k.seq, FUN=function(x){
MCMC(theta.0, y, pi.0, n.iter, a, b, x)$taux.accept})
plot(x=k.seq, y=accept.rate.evolution)
}
set.seed(5)
k.seq <- seq(1, 301, 10)
n.iter <- 10000
a <- 1
b <- 3
y <- c(C1=125, C20=134, C21=21)
pi.0 <- rbeta(n=1, shape1=a, shape2=b)
theta.0 <- c(pi.0=pi.0, N.0=1000)
print(theta.0)
#MCMC(theta.0, y, pi, n.iter, 1, 3, 5)
plot.k.accept.rate(k.seq, theta.0,pi.0, n.iter, y, a, b)
##################changer
#k.opt <- ?
library(extraDistr)
MCMC <- function(theta.0, y, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)*100))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),rbeta(n=1, shape1=1, shape2=3),10000,1,3,60)
library(extraDistr)
MCMC <- function(theta.0, y, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)*100))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),10000,1,3,60)
library(extraDistr)
MCMC <- function(theta.0, y, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),10000,1,3,60)
library(extraDistr)
MCMC <- function(theta.0, y, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),10000,1,3,1000)
library(extraDistr)
MCMC <- function(theta.0, y, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),10000,1,3,100)
N.law <- function(N, pi, c1, c20){
density <- choose(N,c1+c20)*(1-pi)^(2*N)
return(density)
}
library(extraDistr)
MCMC <- function(theta.0, y, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=0),c(C1=125, C20=134, C21=21),10000,1,3,100)
library(extraDistr)
MCMC <- function(theta.0, y, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=600),c(C1=125, C20=134, C21=21),10000,1,3,100)
library(extraDistr)
MCMC <- function(theta.0, y, n.iter, a, b, k){
c1 <- y[1]
c20 <- y[2]
c21 <- y[3]
c2 <- c20 + c21
pi.0 <- theta.0[1]
N.0 <- theta.0[2]
chain <- matrix(0, nrow=n.iter, ncol=2, dimnames=list(NULL,c("pi","N")))
accept <- vector("numeric", n.iter)
chain[1, 1:2] <- theta.0
accept[1] <- 1
N.curr <- N.0
pi.curr <- pi.0
oldlik <- N.law(N.curr, pi.curr, c1, c20)
for (i in 2:n.iter){
#on tire dans la loi conditionnelle complète de pi
#loi uniforme discrète
N.cand <- rdunif(1,N.curr-k,N.curr+k)
u <- runif(n=1,min=0,max=1)
pi.curr <- rbeta(n=1, shape1=c1+c2+a, shape2=2*N.curr-c1-c2+b)
lik <- N.law(N.cand, pi.curr, c1, c20)
r <- lik/oldlik
if (u<min(1,r))
{
N.curr <- N.cand
oldlik <- lik
accept[i] <- 1
}
else {
accept[i]<-0
}
chain[i,] <- c(pi.curr, N.curr)
}
return(list(chain=chain, taux.accept=mean(accept)))
}
MCMC(c(pi.0=rbeta(n=1, shape1=1, shape2=3), N.0=1000),c(C1=125, C20=134, C21=21),10000,1,3,30)
